package user

import (
	"MusicBot/user/utils"
	"errors"
	"github.com/mymmrac/telego"
	"github.com/mymmrac/telego/telegoutil"
	"github.com/withmandala/go-log"
	"strings"
)

type unregUser struct {
	userFather
	url     string
	pass    string
	blocker bool
}

func (u *unregUser) Init(tg Bot, logger *log.Logger, id utils.UserID) {
	u.fatherInit(tg, logger, id)
	u.sendFirstMenu()
}

func (u *unregUser) clearData() {
	u.url = ""
	u.pass = ""
}

func (u *unregUser) sendFirstMenu() {
	u.blocker = true
	keyboard := telegoutil.InlineKeyboard(
		telegoutil.InlineKeyboardRow(
			telegoutil.InlineKeyboardButton("–ø—Ä–∏–Ω–∏–º–∞—Ç—å").WithCallbackData("host"),
			telegoutil.InlineKeyboardButton("–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å").WithCallbackData("send"),
		),
	)
	text := "üë•–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ <b>—Ä–æ–ª–µ–π:</b>\n\n" +
		"üë§<b>–ü—Ä–∏–Ω–∏–º–∞—Ç—å:</b> —Ç—ã –∏ —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç—Ä–µ–∫–∏, –∞ —è –±—É–¥—É —Å—Ç–∞–≤–∏—Ç—å –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å. " +
		"–ö–æ–≥–¥–∞ —Ç—ã –ø–æ–ø—Ä–æ—Å–∏—à—å —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –ø–∞–∫–µ—Ç –∏–∑ —Ç—Ä–µ–∫–æ–≤, –ø–æ –æ–¥–Ω–æ–º—É –æ—Ç –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞. " +
		"–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–ª—É—à–∞—Ç—å –æ–±—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç.\n\n" +
		"üë§<b>–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å:</b> —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–µ–∫–∏, –æ–Ω–∏ –ø–æ–ø–∞–¥—É—Ç –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å, " +
		"—Ç—ã —É—Å–ª—ã—à–∏—à—å –∏ —Å–≤–æ–∏ —Ç—Ä–µ–∫–∏, –∏ —Ç—Ä–µ–∫–∏ –¥—Ä—É–∑–µ–π."
	msg := telegoutil.Message(
		u.id.ChatID,
		text,
	).WithReplyMarkup(keyboard)
	u.sendMessage(msg, false)
	u.clearData()
}

func (u *unregUser) handler(update *telego.Update) (user users, needInit bool) {
	if update.CallbackQuery != nil {
		u.blocker = false

		_, err := u.tg.EditMessageText(&telego.EditMessageTextParams{
			ChatID:    telego.ChatID{ID: update.CallbackQuery.Message.Chat.ID},
			MessageID: update.CallbackQuery.Message.MessageID,
			Text:      update.CallbackQuery.Message.Text,
		})
		if err != nil {
			u.logger.Errorf(err.Error())
		}

		if update.CallbackQuery.Data == "host" {
			hUser := hostUser{}
			return &hUser, true
		} else if update.CallbackQuery.Data == "send" {
			u.sendText("–ü—Ä–∏—à–ª–∏ secretMessage", false)
			u.clearData()
		} else {
			u.logger.Errorf("data not found")
			text := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞,\n–ø–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å /start"
			u.sendText(text, false)
		}

	} else if update.Message != nil {
		if update.Message.Text == "/start" {
			u.sendFirstMenu()
			return
		}
		if u.blocker {
			u.sendFirstMenu()
			return
		}

		if err := u.parseSecretMsg(update.Message.Text); err != nil {
			u.sendText(err.Error(), false)
			u.sendFirstMenu()
		} else {
			return &sendingUser{}, true
		}
	}
	return nil, false
}

func (u *unregUser) parseSecretMsg(text string) error {
	err := errors.New("–Ω–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
	strs := strings.Split(text, "/")
	if len(strs) != 3 {
		return err
	}
	if strs[0] != "secretMessage" {
		return err
	}
	u.url = strs[1][1:]
	u.pass = strs[2]
	return nil
}

func (u *unregUser) notValidate() {
	u.sendText("—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–µ", false)
	u.sendFirstMenu()
}
